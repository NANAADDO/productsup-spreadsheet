services:
  #PHP Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - db
      - redis
    container_name: appservice
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
      APP_ENV: local
      CONTAINER_ROLE: app
      CACHE_DRIVER: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
    working_dir: /var/www
    volumes:
      - ./php/local.ini:/usr/local/etc/conf.d/local.ini
      - ./appservice:/var/www
    networks:
      - kib-network

  webserver:
    image: nginx:alpine
    container_name: appserver
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
    volumes:
      - ./appservice:/var/www
      - ./nginx/conf.d/:/etc/nginx/conf.d
    networks:
      - kib-network

  #MySQL Service
  db:
    image:  mysql:5.7.44
    container_name: db
    restart: unless-stopped
    tty:  true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: neuronation
      MYSQL_USER : appuser
      MYSQL_PASSWORD : app@2024
      MYSQL_ROOT_PASSWORD: app_database
      SERVICE_TAGS : dev
      SERVICE_NAME: mysql
    volumes:
      - dbdata:/var/lib/mysql
    networks:
      - kib-network

  redis:
    image: redis:alpine
    container_name: app-redis
    ports:
      - "6379:6379"
    networks:
      - kib-network

  # phpmyadmin container
  phpmyadmin:
    image: phpmyadmin
    container_name: dbPhpmyadmin
    restart: always
    depends_on:
      - db
    ports:
      - 8080:80
    environment:
      PMA_HOST: db
    networks:
      - kib-network
  # Elastic search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: elasticsearch
    environment:
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - discovery.type=single-node
      - memory=2g
      #- xpack.security.autoconfiguration.enabled=true
      #- xpack.security.enabled=true
      #- discovery.type=single-node
      # xpack.security.enrollment.enabled=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.http.ssl.keystore.path=/usr/share/elasticsearch/config/elastic-certificates.p12
      - xpack.security.http.ssl.keystore.password=Elizabeth.1995
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.keystore.path=/usr/share/elasticsearch/config/elastic-certificates.p12
      - xpack.security.transport.ssl.truststore.path=/usr/share/elasticsearch/config/elastic-certificates.p12
      - xpack.security.http.ssl.truststore.password=Elizabeth.1995
      - network.host=0.0.0.0
    ports:
      - "9200:9200"   # Expose Elasticsearch on port 9200
      - "9300:9300"   # Transport port for internal communication
    volumes:
      - es_data:/usr/share/elasticsearch/data
      - /Users/macintosh/elasticsearch_config:/usr/share/elasticsearch/config
    networks:
      kib-network:
        ipv4_address: 172.21.1.10

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: kibana
    environment:
      - SERVER_MAX_PAYLOAD_BYTES=1048576
      - ELASTICSEARCH_HOSTS=https://172.21.1.10:9200  # Connect to Elasticsearch
      - ELASTICSEARCH_SSL_VERIFICATIONMODE=none
      # - ELASTICSEARCH_SSL_CA=/usr/share/elasticsearch/config/elastic-stack-ca.p12
      - ELASTICSEARCH_USERNAME=super8
      - ELASTICSEARCH_PASSWORD=super1
    ports:
      - "5601:5601"   # Expose Kibana on port 5601
    volumes:
      - /Users/macintosh/elasticsearch_config/elastic-stack-ca.p12:/usr/share/elasticsearch/config/elastic-stack-ca.p12
    depends_on:
      - elasticsearch # Ensure Elasticsearch starts before Kibana
    networks:
      - kib-network
  fluentd:
    image: fluent/fluentd:v1.16.3-debian
    container_name: fluentd
    depends_on:
      - elasticsearch
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - /var/log:/fluentd/log:rw
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - kib-network



# Docker Networks
networks:
  kib-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.1.0/16
#Volumes
volumes:
  dbdata:
    driver: local
  redis:
    driver: local
  es_data:
    driver: local
